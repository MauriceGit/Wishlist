// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
)

const createLink = `-- name: CreateLink :exec
INSERT INTO links (
    wish_id, link_index, url
)
VALUES (
    (SELECT id FROM wishes
     WHERE wishlist_uuid = ? AND wish_index = ?),
    ?,
    ?
)
`

type CreateLinkParams struct {
	WishlistUuid string
	WishIndex    int64
	LinkIndex    int64
	Url          string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) error {
	_, err := q.db.ExecContext(ctx, createLink,
		arg.WishlistUuid,
		arg.WishIndex,
		arg.LinkIndex,
		arg.Url,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    name, passwordhash
) VALUES(
    ?, ?
)
`

type CreateUserParams struct {
	Name         string
	Passwordhash []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Passwordhash)
	return err
}

const createWish = `-- name: CreateWish :exec
INSERT INTO wishes(
    wishlist_uuid, wish_index, name, description, image_url, reserved
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateWishParams struct {
	WishlistUuid string
	WishIndex    int64
	Name         string
	Description  string
	ImageUrl     string
	Reserved     int64
}

func (q *Queries) CreateWish(ctx context.Context, arg CreateWishParams) error {
	_, err := q.db.ExecContext(ctx, createWish,
		arg.WishlistUuid,
		arg.WishIndex,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.Reserved,
	)
	return err
}

const createWishlist = `-- name: CreateWishlist :exec
INSERT INTO wishlists (
    uuid, user_name, title
) VALUES (
    ?, ?, ?
)
`

type CreateWishlistParams struct {
	Uuid     string
	UserName string
	Title    string
}

func (q *Queries) CreateWishlist(ctx context.Context, arg CreateWishlistParams) error {
	_, err := q.db.ExecContext(ctx, createWishlist, arg.Uuid, arg.UserName, arg.Title)
	return err
}

const deleteAllLinks = `-- name: DeleteAllLinks :exec
DELETE FROM links
`

func (q *Queries) DeleteAllLinks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllLinks)
	return err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const deleteAllWishes = `-- name: DeleteAllWishes :exec
DELETE FROM wishes
`

func (q *Queries) DeleteAllWishes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllWishes)
	return err
}

const deleteAllWishlists = `-- name: DeleteAllWishlists :exec
DELETE FROM wishlists
`

func (q *Queries) DeleteAllWishlists(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllWishlists)
	return err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE wish_id = (
    SELECT id FROM wishes WHERE wishlist_uuid = ? AND wish_index = ?
) AND link_index = ?
`

type DeleteLinkParams struct {
	WishlistUuid string
	WishIndex    int64
	LinkIndex    int64
}

func (q *Queries) DeleteLink(ctx context.Context, arg DeleteLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteLink, arg.WishlistUuid, arg.WishIndex, arg.LinkIndex)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE name = ?
`

func (q *Queries) DeleteUser(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, name)
	return err
}

const deleteWish = `-- name: DeleteWish :exec
DELETE FROM wishes
WHERE wishlist_uuid = ? AND wish_index = ?
`

type DeleteWishParams struct {
	WishlistUuid string
	WishIndex    int64
}

func (q *Queries) DeleteWish(ctx context.Context, arg DeleteWishParams) error {
	_, err := q.db.ExecContext(ctx, deleteWish, arg.WishlistUuid, arg.WishIndex)
	return err
}

const deleteWishlist = `-- name: DeleteWishlist :exec
DELETE FROM wishlists
WHERE uuid = ?
`

func (q *Queries) DeleteWishlist(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, deleteWishlist, uuid)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, wish_id, link_index, url FROM links
WHERE wish_id = (
    SELECT id FROM wishes WHERE wishlist_uuid = ? AND wish_index = ?
) AND link_index = ? LIMIT 1
`

type GetLinkParams struct {
	WishlistUuid string
	WishIndex    int64
	LinkIndex    int64
}

func (q *Queries) GetLink(ctx context.Context, arg GetLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLink, arg.WishlistUuid, arg.WishIndex, arg.LinkIndex)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.WishID,
		&i.LinkIndex,
		&i.Url,
	)
	return i, err
}

const getLinks = `-- name: GetLinks :many
SELECT id, wish_id, link_index, url FROM links
WHERE wish_id = (
    SELECT id FROM wishes WHERE wishlist_uuid = ? AND wish_index = ?
)
ORDER BY link_index
`

type GetLinksParams struct {
	WishlistUuid string
	WishIndex    int64
}

func (q *Queries) GetLinks(ctx context.Context, arg GetLinksParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getLinks, arg.WishlistUuid, arg.WishIndex)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.WishID,
			&i.LinkIndex,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnusedLinks = `-- name: GetUnusedLinks :many
SELECT id, wish_id, link_index, url FROM links
WHERE wish_id = (
    SELECT id FROM wishes WHERE wishlist_uuid = ? AND wish_index = ?
) AND link_index >= ?
ORDER BY link_index
`

type GetUnusedLinksParams struct {
	WishlistUuid string
	WishIndex    int64
	LinkIndex    int64
}

func (q *Queries) GetUnusedLinks(ctx context.Context, arg GetUnusedLinksParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getUnusedLinks, arg.WishlistUuid, arg.WishIndex, arg.LinkIndex)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.WishID,
			&i.LinkIndex,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT name, passwordhash FROM users
WHERE name = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(&i.Name, &i.Passwordhash)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT name, passwordhash FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Name, &i.Passwordhash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWish = `-- name: GetWish :one
SELECT id, wishlist_uuid, wish_index, name, description, image_url, reserved FROM wishes
WHERE wishlist_uuid = ? AND wish_index = ? LIMIT 1
`

type GetWishParams struct {
	WishlistUuid string
	WishIndex    int64
}

func (q *Queries) GetWish(ctx context.Context, arg GetWishParams) (Wish, error) {
	row := q.db.QueryRowContext(ctx, getWish, arg.WishlistUuid, arg.WishIndex)
	var i Wish
	err := row.Scan(
		&i.ID,
		&i.WishlistUuid,
		&i.WishIndex,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Reserved,
	)
	return i, err
}

const getWishes = `-- name: GetWishes :many
SELECT id, wishlist_uuid, wish_index, name, description, image_url, reserved FROM wishes
WHERE wishlist_uuid = ?
ORDER BY wish_index
`

func (q *Queries) GetWishes(ctx context.Context, wishlistUuid string) ([]Wish, error) {
	rows, err := q.db.QueryContext(ctx, getWishes, wishlistUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wish
	for rows.Next() {
		var i Wish
		if err := rows.Scan(
			&i.ID,
			&i.WishlistUuid,
			&i.WishIndex,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Reserved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWishlist = `-- name: GetWishlist :one
SELECT uuid, user_name, title FROM wishlists
WHERE uuid = ? LIMIT 1
`

func (q *Queries) GetWishlist(ctx context.Context, uuid string) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, getWishlist, uuid)
	var i Wishlist
	err := row.Scan(&i.Uuid, &i.UserName, &i.Title)
	return i, err
}

const getWishlists = `-- name: GetWishlists :many
SELECT uuid, user_name, title FROM wishlists
WHERE user_name = ?
`

func (q *Queries) GetWishlists(ctx context.Context, userName string) ([]Wishlist, error) {
	rows, err := q.db.QueryContext(ctx, getWishlists, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wishlist
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(&i.Uuid, &i.UserName, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setWishReserve = `-- name: SetWishReserve :exec
UPDATE wishes
SET reserved = ?
WHERE wishlist_uuid = ? AND wish_index = ?
`

type SetWishReserveParams struct {
	Reserved     int64
	WishlistUuid string
	WishIndex    int64
}

func (q *Queries) SetWishReserve(ctx context.Context, arg SetWishReserveParams) error {
	_, err := q.db.ExecContext(ctx, setWishReserve, arg.Reserved, arg.WishlistUuid, arg.WishIndex)
	return err
}

const updateLink = `-- name: UpdateLink :exec
UPDATE links
SET url = ?
WHERE wish_id = (
    SELECT id FROM wishes WHERE wishlist_uuid = ? AND wish_index = ?
) AND link_index = ?
`

type UpdateLinkParams struct {
	Url          string
	WishlistUuid string
	WishIndex    int64
	LinkIndex    int64
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateLink,
		arg.Url,
		arg.WishlistUuid,
		arg.WishIndex,
		arg.LinkIndex,
	)
	return err
}

const updateWish = `-- name: UpdateWish :exec
UPDATE wishes
SET name = ?,
    description = ?,
    image_url = ?,
    reserved = ?
WHERE wishlist_uuid = ? AND wish_index = ?
`

type UpdateWishParams struct {
	Name         string
	Description  string
	ImageUrl     string
	Reserved     int64
	WishlistUuid string
	WishIndex    int64
}

func (q *Queries) UpdateWish(ctx context.Context, arg UpdateWishParams) error {
	_, err := q.db.ExecContext(ctx, updateWish,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.Reserved,
		arg.WishlistUuid,
		arg.WishIndex,
	)
	return err
}

const updateWishlist = `-- name: UpdateWishlist :exec
UPDATE wishlists
SET title = ?
WHERE uuid = ?
`

type UpdateWishlistParams struct {
	Title string
	Uuid  string
}

func (q *Queries) UpdateWishlist(ctx context.Context, arg UpdateWishlistParams) error {
	_, err := q.db.ExecContext(ctx, updateWishlist, arg.Title, arg.Uuid)
	return err
}
